
#Область ПрограммныйИнтерфейс

Функция ПолучитьСсылкуПоURL(Знач URL) Экспорт
	Результат = Неопределено;
	ТипСсылки = "";
	СтрУИДURL = "";
	Поз = СтрНайти(URL, "e1cib/data/");
	Если Поз > 0 Тогда
		Поз = Поз + 11;
		Поз1 = СтрНайти(URL, "?", , Поз);
		Если Поз1 > 0 Тогда
			ТипСсылки = Сред(URL, Поз, Поз1 - Поз);
			Поз1 = Поз1 + 5;
			СтрУИДURL = Сред(URL, Поз1, 32);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрУИДURL) Тогда
			СтрУИД = УИДURLВУИД(СтрУИДURL);
			Результат = ПолучитьСсылку(ТипСсылки, СтрУИД);
		КонецЕсли;
	Иначе
		Поз = СтрНайти(URL, "e1cib/enum/");
		Если Поз > 0 Тогда
			Поз = Поз + 11;
			Поз1 = СтрНайти(URL, ".", , Поз);
			Если Поз1 > 0 Тогда
				ИмяПеречисления = Сред(URL, Поз, Поз1 - Поз);
				ИмяЗначенияПеречисления = Сред(URL, Поз1 + 1);
				Результат = Перечисления[ИмяПеречисления][ИмяЗначенияПеречисления];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПолучитьРеквизитСсылкиПоURL(URL, ИмяРеквизита) Экспорт
	Ссылка = ПолучитьСсылкуПоURL(URL);
	Результат = Ссылка[ИмяРеквизита];
	Результат = ВПростоеЗначение(Результат);
	Возврат Результат;
КонецФункции

Функция ВыполнитьЗапрос(ТекстЗапроса, ПараметрыЗапроса = Неопределено) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Если ПараметрыЗапроса <> Неопределено Тогда
		Для Каждого КЗ из ПараметрыЗапроса Цикл
			УстановитьПараметрЗапроса(Запрос, КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
	КонецЕсли;
	ТЗ = Запрос.Выполнить().Выгрузить();
	Результат = ПреобразоватьТаблицуЗначенийВМассивМассивов(ТЗ);
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

Функция ПолучитьURLПоСсылке(Знач Ссылка, Знач НавигационнаяСсылкаИнформационнойБазы = "")
	Если НавигационнаяСсылкаИнформационнойБазы = "" Тогда
		НавигационнаяСсылкаИнформационнойБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	КонецЕсли;
	Если ТипЗнч(Ссылка) <> Тип("Неопределено") и Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылкуЗначенияПеречисления(Ссылка);
	Иначе
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Ссылка);
	КонецЕсли;
	Результат = НавигационнаяСсылкаИнформационнойБазы + "#" + НавигационнаяСсылка;
	Возврат Результат;
КонецФункции

Функция ПолучитьСсылку(ТипСсылки, СтрУИД)
	УИД = Новый УникальныйИдентификатор(СтрУИД);
	Менеджер = ПолучитьМенеджерПоТипуСсылки(ТипСсылки);
	Результат = Менеджер.ПолучитьСсылку(УИД);
	Возврат Результат;
КонецФункции

Функция ИзПростогоЗначения(ПростоеЗначение)
	Результат = ПростоеЗначение;
	Если ТипЗнч(ПростоеЗначение) = Тип("Строка") Тогда
		URL = НайтиURLВСтроке(ПростоеЗначение);
		Если ЗначениеЗаполнено(URL) Тогда
			Результат = ПолучитьСсылкуПоURL(URL);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ВПростоеЗначение(Значение)
	Результат = Значение;
	Если ТипЗнч(Значение) = Тип("Строка")
			или ТипЗнч(Значение) = Тип("Дата")
			или ТипЗнч(Значение) = Тип("Число")
			или ТипЗнч(Значение) = Тип("Булево") Тогда
		Результат = Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип("Null") Тогда
		Результат = Неопределено;
	ИначеЕсли ЭтоЗначениеСсылочногоТипа(Значение) Тогда
		Результат = ПолучитьURLПоСсылке(Значение);
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПолучитьМенеджерПоТипуСсылки(ТипСсылки)
	Результат = Неопределено;
	ИмяОбъекта = Неопределено;
	Если СтрНачинаетсяС(ТипСсылки, "Справочник.") Тогда
		ИмяОбъекта = СтрЗаменить(ТипСсылки, "Справочник.", "");
		Результат = Справочники[ИмяОбъекта];
	ИначеЕсли СтрНачинаетсяС(ТипСсылки, "Документ.") Тогда
		ИмяОбъекта = СтрЗаменить(ТипСсылки, "Документ.", "");
		Результат = Документы[ИмяОбъекта];
	ИначеЕсли СтрНачинаетсяС(ТипСсылки, "ПланВидовХарактеристик.") Тогда
		ИмяОбъекта = СтрЗаменить(ТипСсылки, "ПланВидовХарактеристик.", "");
		Результат = ПланыВидовХарактеристик[ИмяОбъекта];
	ИначеЕсли СтрНачинаетсяС(ТипСсылки, "ПланСчетов.") Тогда
		ИмяОбъекта = СтрЗаменить(ТипСсылки, "ПланСчетов.", "");
		Результат = ПланыСчетов[ИмяОбъекта];
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПолучитьНавигационнуюСсылкуЗначенияПеречисления(ЗначениеПеречисления)
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	Результат = СтрШаблон("e1cib/enum/%1.%2", ИмяПеречисления, ИмяЗначенияПеречисления);
	Возврат Результат;
КонецФункции

Функция ПреобразоватьТаблицуЗначенийВМассивМассивов(ТаблицаЗначений)
	// массив массивов организован так, чтобы на клиенте сделать из него ComSafeArray,
	// в старшем индексе - колонки: МассивКолонок[Колонка][Строка]
	МассивКолонок = Новый Массив();
	КоличествоСтрок = ТаблицаЗначений.Количество();
	Для Каждого Колонка из ТаблицаЗначений.Колонки Цикл
		МассивКолонка = ТаблицаЗначений.ВыгрузитьКолонку(Колонка.Имя);
		Для ё = 0 по КоличествоСтрок - 1 Цикл
			МассивКолонка[ё] = ВПростоеЗначение(МассивКолонка[ё]);
		КонецЦикла;
		МассивКолонок.Добавить(МассивКолонка);
	КонецЦикла;
	Возврат МассивКолонок;
КонецФункции

Функция ЭтоЗначениеСсылочногоТипа(Значение)
	Перем Результат;
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Неопределено") Тогда
		Возврат Ложь;
	КонецЕсли;
	Результат = Справочники.ТипВсеСсылки().СодержитТип(ТипЗначения)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначения)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(ТипЗначения)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗначения)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗначения)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗначения)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ТипЗначения)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(ТипЗначения)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗначения)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипЗначения);
	Возврат Результат;
КонецФункции

Функция НайтиURLВСтроке(Знач Стр)
	Результат = "";
	Поз = СтрНайти(Стр, "e1c:");
	Если Поз > 0 Тогда
		Поз1 = СтрНайти(Стр, """", , Поз);
		Если Поз1 > 0 Тогда
			Результат = Сред(Стр, Поз, Поз1 - Поз);
		Иначе
			Результат = Сред(Стр, Поз);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция УИДURLВУИД(Знач СтрУИДURL)
	Часть1 = Лев(СтрУИДURL, 16);
	Часть2 = Сред(СтрУИДURL, 17, 4);
	Часть3 = Сред(СтрУИДURL, 21, 4);
	Часть4 = Прав(СтрУИДURL, 8);
	Результат = Часть4 + "-" + Часть3 + "-" + Часть2 + "-" + Лев(Часть1, 4) + "-" + Прав(Часть1, 12);
	Возврат Результат;
КонецФункции

Функция УИДВУИДURL(Знач СтрУИД)
	Результат = СтрЗаменить(СтрУИД, "-", "");
	Результат = Сред(Результат, 17, 16) + Сред(Результат, 13, 4) + Сред(Результат, 9, 4) + Сред(Результат, 1, 8);
	Возврат Результат;
КонецФункции

Процедура УстановитьПараметрЗапроса(Запрос, ИмяПараметра, ЗначениеПараметра)
	Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
		ЧислоСтрок = 0;
		ЧислоКолонок = ЗначениеПараметра.Количество();
		Если ЧислоКолонок > 0 и ТипЗнч(ЗначениеПараметра[0]) = Тип("Массив") Тогда
			ЧислоСтрок = ЗначениеПараметра[0].Количество();
		КонецЕсли;
		Если ЧислоСтрок > 1 и ЧислоКолонок = 1 Тогда
			// параметр - вертикальный массив
			МассивПростыхЗначений = Новый Массив();
			Для ё = 0 по ЧислоСтрок - 1 Цикл
				Значение = ЗначениеПараметра[0][ё];
				МассивПростыхЗначений.Добавить(ИзПростогоЗначения(Значение));
			КонецЦикла;
			Запрос.Параметры.Вставить(ИмяПараметра, МассивПростыхЗначений);
		ИначеЕсли ЧислоСтрок = 1 и ЧислоКолонок > 1 Тогда
			// параметр - горизонтальный массив
			МассивПростыхЗначений = Новый Массив();
			Для ё = 0 по ЧислоКолонок - 1 Цикл
				Значение = ЗначениеПараметра[ё][0];
				МассивПростыхЗначений.Добавить(ИзПростогоЗначения(Значение));
			КонецЦикла;
			Запрос.Параметры.Вставить(ИмяПараметра, МассивПростыхЗначений);
		ИначеЕсли ЧислоСтрок > 1 и ЧислоКолонок > 1 Тогда
			// параметр - таблица значений
			ТЗ = Новый ТаблицаЗначений();
			СтрокаТЗ = Неопределено;
			Для ё = 0 по ЧислоСтрок - 1 Цикл
				Для ж = 0 по ЧислоКолонок - 1 Цикл
					Значение = ЗначениеПараметра[ж][ё];
					Если ё = 0 Тогда
						ТЗ.Колонки.Добавить(Значение);
						Продолжить;
					КонецЕсли;
					Если ж = 0 Тогда
						СтрокаТЗ = ТЗ.Добавить();
					КонецЕсли;
					СтрокаТЗ[ж] = ИзПростогоЗначения(Значение);
				КонецЦикла;
			КонецЦикла;
			ТипизированнаяТЗ = ПолучитьТипизированнуюТаблицуЗначений(ТЗ);
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
			ПреобразоватьТаблицуЗначенийВоВременнуюТаблицу(ТипизированнаяТЗ, МенеджерВременныхТаблиц, ИмяПараметра);
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		КонецЕсли;
	Иначе
		Запрос.Параметры.Вставить(ИмяПараметра, ИзПростогоЗначения(ЗначениеПараметра));
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьТипизированнуюТаблицуЗначений(ТаблицаЗначений)
	Результат = Новый ТаблицаЗначений();
	Колонки = Новый Структура();
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Свойства = Новый Структура("Типы,ЕстьСтроки,ДлинаСтроки",
				Новый Массив(), Ложь, 10);
		Колонки.Вставить(Колонка.Имя, Свойства);
	КонецЦикла;
	Для Каждого СтрокаТЗ из ТаблицаЗначений Цикл
		Для Каждого КЗ из Колонки Цикл
			ИмяКолонки = КЗ.Ключ;
			Свойства = КЗ.Значение;
			Значение = СтрокаТЗ[КЗ.Ключ];
			ТипЗначения = ТипЗнч(Значение);
			Если Свойства.Типы.Найти(ТипЗначения) = Неопределено Тогда
				Свойства.Типы.Добавить(ТипЗначения);
			КонецЕсли;
			Если ТипЗначения = Тип("Строка") Тогда
				Свойства.ЕстьСтроки = Истина;
				ДлинаСтроки = СтрДлина(Значение);
				Если ДлинаСтроки > Свойства.ДлинаСтроки Тогда
					Свойства.ДлинаСтроки = ДлинаСтроки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Свойства = Колонки[Колонка.Имя];
		КвалификаторыСтроки = Неопределено;
		Если Свойства.ЕстьСтроки Тогда
			КвалификаторыСтроки = Новый КвалификаторыСтроки(Свойства.ДлинаСтроки);
		КонецЕсли;
		ОписаниеТипов = Новый ОписаниеТипов(Свойства.Типы, , КвалификаторыСтроки);
		Результат.Колонки.Добавить(Колонка.Имя, ОписаниеТипов);
	КонецЦикла;
	Для Каждого СтрокаТЗ из ТаблицаЗначений Цикл
		СтрокаТЗ1 = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ1, СтрокаТЗ);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура ПреобразоватьТаблицуЗначенийВоВременнуюТаблицу(ТаблицаЗначений, МенеджерВременныхТаблиц, ИмяТаблицы)
	Если Не ЭтоКорректныйИдентификатор(ИмяТаблицы) Тогда
		ВызватьИсключение СтрШаблон("Некорректное имя таблицы: %1", ИмяТаблицы);
	КонецЕсли;
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ " + ИмяТаблицы + " из &ТаблицаЗначений Как ТЗ";
	Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаЗначений);
	Запрос.Выполнить();
КонецПроцедуры

Функция ЭтоКорректныйИдентификатор(Идентификатор)
	Результат = Ложь;
	Попытка
		Структура = Новый Структура();
		Структура.Вставить(Идентификатор);
		Результат = Структура.Свойство(Идентификатор);
	Исключение
		// ничего не делаем
	КонецПопытки;
	Возврат Результат;
КонецФункции

#КонецОбласти
